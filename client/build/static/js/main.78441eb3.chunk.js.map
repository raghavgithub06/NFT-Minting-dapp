{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","CONTRACT_ADDRESS","useState","account","setAccount","totalTokens","setTotalTokens","loading","setLoading","connectWallet","a","window","ethereum","alert","console","log","request","method","accounts","accountsListener","networkListener","setEventListener","getTotalNFTs","signer","ethers","providers","Web3Provider","getSigner","Contract","NFTEpic","abi","on","from","tokenId","toString","error","removeListener","handleAccounts","newAccounts","chainId","networkHandler","askContractToMintNft","provider","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","tokens","className","onClick","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78441eb3.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { useEffect, useState } from \"react\"\nimport { ethers } from \"ethers\";\n\nimport NFTEpic from \"./utils/NFTEpic.json\"\n\n// Constants\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/shingekinokyojinnft';\n\nconst App = () => {\n\n  const CONTRACT_ADDRESS = \"0xe96CA3Ab75Eb32C1C0d7F692D8ab4A91d1862386\";\n\n  const [account, setAccount] = useState(\"\");\n  const [totalTokens, setTotalTokens] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const connectWallet = async () => {\n    try {\n\n      if (!window.ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      console.log(\"Metamsk available\");\n\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(accounts[0]);\n\n      accountsListener();\n      networkListener();\n\n      setEventListener();\n      getTotalNFTs();\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const setEventListener = () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTEpic.abi, signer);\n\n        connectedContract.on(\"NFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toString());\n          alert(` Here's the link to your contract: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toString()}. It might take some time to show up on opensea`);\n        });\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const accountsListener = () => {\n    window.ethereum.removeListener('accountsChanged', handleAccounts);\n    window.ethereum.on(\"accountsChanged\", handleAccounts);\n  }\n\n  const handleAccounts = async () => {\n    console.log(\"account changed\");\n    const newAccounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    setAccount(newAccounts[0]);\n  }\n\n  const networkListener = () => {\n    window.ethereum.removeListener('chainChanged', (chainId) => {\n      networkHandler(chainId);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      networkHandler(chainId);\n    });\n  }\n\n  const networkHandler = (chainId) => {\n    if (chainId !== \"0x4\") {\n      alert(\"Please connect to the rinkeby network!\");\n    }\n  }\n\n  const askContractToMintNft = async () => {\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTEpic.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        setLoading(true);\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setLoading(false);\n\n        const tokens = await connectedContract.totalTokens();\n        setTotalTokens(tokens.toString());\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }\n\n  const getTotalNFTs = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTEpic.abi, signer);\n\n        const tokens = await connectedContract.totalTokens();\n        console.log(tokens.toString());\n        setTotalTokens(tokens.toString());\n        console.log(totalTokens);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  )\n\n  const showCollection = () => (\n    <a href={OPENSEA_LINK} target=\"_blank\">\n      <button className=\"cta-button connect-wallet-button\">\n        Show Collection\n      </button>\n    </a>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My AOT NFT Collection</p>\n          <p className=\"sub-text\">\n            Get AOT characters as NFTs. Lets see if you can get a character with the right name.\n          </p>\n          {account !== \"\" && <p className=\"minting\">account connected - {account}</p>}\n          {account === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n          <p>{account !== \"\" && showCollection()}</p>\n          {totalTokens !== \"\" && <p className=\"minting\">Total NFTs minted = <b>{totalTokens}/100</b></p>}\n          <p>{loading && <b className=\"minting\">...minting</b>}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}